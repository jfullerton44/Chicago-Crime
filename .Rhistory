## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(flights, dep_delay != "NA")
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(flights, dep_delay is.na())
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(flights, is.na(dep_time))
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(flights, is.na(dep_time)==FALSE)
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(is.na(dep_time)==FALSE)
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(is.na(dep_time)==TRUE)
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(is.na(dep_time)==FALSE)
## Let's make a dataframe that represents only flights that actually flew"
not_cancelled <- flights%>%
filter(!is.na(dep_time))
not_cancelled  %>%
group_by(dest) %>%
summarize(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers))
## 1.) Find all destinations that are flown by at least two carriers.
not_cancelled  %>%
group_by(dest) %>%
summarize(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers))
not_cancelled %>%
count(dest)
## 1.) Find all destinations that are flown by at least two carriers.
not_cancelled  %>%
group_by(dest) %>%
summarize(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers)) %>%
filter(carriers>1)
View(not_cancelled)
not_cancelled %>%
group_by(flight) %<%
summarize(min_delay= min(arr_delay)) %<%
filter(min_delay == 10)
not_cancelled %>%
group_by(flight) %>%
summarize(min_delay= min(arr_delay)) %>%
filter(min_delay == 10)
not_cancelled %>%
group_by(flight) %>%
summarize(min_delay= min(arr_delay)) %>%
summarize(max_delay = max(arr_delay)) %>%
filter(min_delay == 10& max_delay==10)
not_cancelled %>%
group_by(flight) %>%
summarize(min_delay= min(arr_delay)) %>%
summarize(max_delay = max(arr_delay)) %>%
filter(min_delay == 10 & max_delay==10)
not_cancelled %>%
group_by(flight) %>%
summarize(min_delay= min(arr_delay)) %>%
filter(min_delay >= 10)
## 1.) Find all destinations that are flown by at least two carriers.
not_cancelled  %>%
group_by(dest) %>%
summarize(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers)) %>%
filter(carriers>1)
install.packages(knitr)
install.packages("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=mpg) +
stat_summary(
mapping = aes(x = class, y = displ),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color=class))
library(ggplot)
library(tidyverse)
library(ggplot2)
ggplot(data = mpg) + geom_point(mapping =aes(x = displ, y = hwy), position = "jitter")
library(tidyverse)
1
123
ggmap(get_googlemap(key=AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ))
library(tidyverse)
library(ggplot2)
library(lubridate)
library(ggplot2)
library(ggmap)
library(dplyr)
library(data.table)
library(ggrepel)
crimesPerYear<-count(crimes,Year)
ggmap(get_googlemap(key=AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ))
ggmap(get_googlemap(key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ'))
setwd("~/Desktop/DS/Project1")
to2004 <- read.csv("Chicago_Crimes_2001_to_2004.csv",stringsAsFactors=FALSE)
to2007 <- read.csv("Chicago_Crimes_2005_to_2007.csv",stringsAsFactors=FALSE)
to2011 <- read.csv("Chicago_Crimes_2008_to_2011.csv",stringsAsFactors=FALSE)
to2017 <- read.csv("Chicago_Crimes_2012_to_2017.csv",stringsAsFactors=FALSE)
all <- rbind(to2004,to2007,to2011,to2017)
backup<- all
all<-backup
crimes <- filter(all,Year>2007)
crimes <-filter(crimes,Year<2018)
crimesPerYear<-count(crimes,Year)
year2017 <- filter(to2017,Year==2017)
gambling <- filter(crimes,Primary.Type=='GAMBLING')
gamblingNew <- filter(crimes,Primary.Type=='GAMBLING',as.numeric(Year)>2007)
gambling <- filter(gambling,!is.na(Year))
# Create some color variables for graphing later
col1 = "#011f4b" ## sapphire
col2 = "#6497b1" ## moderate cyan/moderate cornflower blue
col3 = "#b3cde0" ## very light blue
col4 = "#CC0000" ## red
crimes$Longitude <- as.numeric(crimes$Longitude)
View(crimes)
crimes$Latitude <- as.numeric(crimes$Latitude)
crimesPerYear<-count(crimes,Year)
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = gambling, size = 0.5) +
theme(legend.position="bottom")
##1) Create a map with all of the crime locations plotted.
p <- ggmap(get_googlemap(center = c(lon = -87.645167, lat = 41.808013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color',
key = 'AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ'
))
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = gambling, size = 0.5) +
theme(legend.position="bottom")
gambling <- filter(crimes,Primary.Type=='GAMBLING')
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = gambling, size = 0.5) +
theme(legend.position="bottom")
hasLocation <- filter(crimes, !is.na(Longitude),!is.na(Latitude))
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = hasLocation, size = 0.5) +
theme(legend.position="bottom")
rand1000 <-sample_n(hasLocation,1000)
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Primary.Type), data = rand1000, size = 0.5) +
theme(legend.position="bottom")
View(crimes)
typesOfCrimes <- count(hasLocaion, Primary.Type)
typesOfCrimes <- count(hasLocation, Primary.Type)
View(typesOfCrimes)
singleCrime <- filter(hasLocation, Primary.Type =="KIDNAPPING")
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = singleCrime, size = 0.5) +
theme(legend.position="bottom")
singleCrime <- filter(hasLocation, Primary.Type =="DECEPTIVE PRACTICE")
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = singleCrime, size = 0.5) +
theme(legend.position="bottom")
singleRand <- sample_n(singleCrime,1000)
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = singleRand, size = 0.5) +
theme(legend.position="bottom")
singleRand <- sample_n(singleCrime,5000)
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = singleRand, size = 0.5) +
theme(legend.position="bottom")
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw',
key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ')#Get the map from Google Maps
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw',
key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ')#Get the map from Google Maps
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
ggmap(p, extent = "device") +
geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)#Plot
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
ggmap(map, extent = "device") +
geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)#Plot
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
devtools::install_github("dkahle/ggmap" )
install.packages(c('devtools','curl'))
libarary(devtools)
library(devtools)
devtools::install_github("dkahle/ggmap" )
library(ggmap)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.4) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.5) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.9) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.9), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 26, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
singleRand <- sample_n(singleCrime,5000)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
singleRand <- sample_n(singleCrime,5000)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
knitr::opts_chunk$set(echo = TRUE)
crimes <- filter(all,Year>2007)
crimes <-filter(crimes,Year<2018)
crimes$Longitude <- as.numeric(crimes$Longitude)
crimes$Latitude <- as.numeric(crimes$Latitude)
hasLocation <- filter(crimes, !is.na(Longitude),!is.na(Latitude))
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="CRIMINAL TRESSPASS")
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 35, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleRand, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleRand,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 35, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 35, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="KIDNAPPING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="BURGLARY")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="HOMICIDE")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="NARCOTICS")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 100, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="KIDNAPPING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="BURGLARY")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="NARCOTICS")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="KIDNAPPING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="BURGLARY")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ROBBERY")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="HOMICIDE")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="NARCOTICS")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="ASSAULT")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
singleCrime <- filter(hasLocation, Primary.Type =="GAMBLING")
ggmap(map, extent = "device") + geom_density2d(data = singleCrime, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = singleCrime,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 50, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE)
map <- get_map(location=c(lon=-87.645167,lat=41.808013),key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ', zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
map <- get_map(location=c(lon=-87.645167,lat=41.808013), zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
map <- get_map(location=c(lon=-87.645167,lat=41.808013),api_key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ', zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
##1) Create a map with all of the crime locations plotted.
p <- ggmap(get_googlemap(center = c(lon = -87.645167, lat = 41.808013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color',
key = 'AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ'
))
##1) Create a map with all of the crime locations plotted.
p <- ggmap(get_googlemap(center = c(lon = -87.645167, lat = 41.808013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color',
key = 'AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ'
))
##1) Create a map with all of the crime locations plotted.
p <- ggmap(get_googlemap(center = c(lon = -87.645167, lat = 41.808013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color',
key = 'AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ'
))
Kidnappingp + geom_point(aes(x = Longitude, y = Latitude,  colour = Primary.Type), data = rand1000, size = 0.5) +
theme(legend.position="bottom")
p + geom_point(aes(x = Longitude, y = Latitude,  colour = Year), data = singleRand, size = 0.5) +
theme(legend.position="bottom")
map <- get_map(location=c(lon=-87.645167,lat=41.808013),api_key='AIzaSyBzD0JsQd1dyQzz8iUcB4sqyzhRSD17mGQ', zoom=11, maptype='roadmap', color='bw')#Get the map from Google Maps
## First we library/install pacakges necessary for our analysis:
install.packages("RCurl")
install.packages("gmodels")
install.packages("class")
install.packages("ggcorrplot")
install.packages("caret")
install.packages("ROCR")
suppressWarnings((library(class)))
suppressWarnings(library(tidyverse))
suppressWarnings(library(caret))
suppressWarnings(library(ggcorrplot))
suppressWarnings(library(e1071))
suppressWarnings(library(ROCR))
suppressWarnings(library(pROC))
suppressWarnings(library(RCurl))
suppressWarnings(library(gmodels))
UCI_data_URL <- getURL('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data')
names <- c('id_number', 'diagnosis', 'radius_mean',
'texture_mean', 'perimeter_mean', 'area_mean',
'smoothness_mean', 'compactness_mean',
'concavity_mean','concave_points_mean',
'symmetry_mean', 'fractal_dimension_mean',
'radius_se', 'texture_se', 'perimeter_se',
'area_se', 'smoothness_se', 'compactness_se',
'concavity_se', 'concave_points_se',
'symmetry_se', 'fractal_dimension_se',
'radius_worst', 'texture_worst',
'perimeter_worst', 'area_worst',
'smoothness_worst', 'compactness_worst',
'concavity_worst', 'concave_points_worst',
'symmetry_worst', 'fractal_dimension_worst')
breast_cancer <- read.table(textConnection(UCI_data_URL), sep = ',', col.names = names)
breast_cancer$id_number <- NULL ## We don't need the ID number as a feature -- it will not help us make any
## Time to examine the data.  Let's look at the first several entries to get a sense of it
head(breast_cancer)
## We can also determine the dimensions of our dataset:
breast_cancer %>% dim()
summary(breast_cancer)
breast_cancer %>% count(diagnosis)
group_by(diagnosis) %>%
summarize(perc_dx = round((n / 569)* 100, 2))
set.seed(42)
trainIndex <- createDataPartition(breast_cancer$diagnosis,
p = .8,
list = FALSE,
times = 1)
training_set <- breast_cancer[ trainIndex, ]
test_set <- breast_cancer[ -trainIndex, ]
## Time to make a model!
knnPred <- knn(train=training_set[,-1], test=test_set[,-1], cl=training_set$diagnosis, k=5)
CrossTable(x=test_set$diagnosis,y=knnModel,prop.chisq = FALSE)
## Time to make a model!
knnPred <- knn(train=training_set[,-1], test=test_set[,-1], cl=training_set$diagnosis, k=5)
CrossTable(x=test_set$diagnosis,y=knnModel,prop.chisq = FALSE)
